<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Reactivecocoa | Lee]]></title>
  <link href="http://leechenglong.github.io/blog/categories/reactivecocoa/atom.xml" rel="self"/>
  <link href="http://leechenglong.github.io/"/>
  <updated>2015-03-27T23:18:25+08:00</updated>
  <id>http://leechenglong.github.io/</id>
  <author>
    <name><![CDATA[LiChenglong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ReactiveCocoa实例应用]]></title>
    <link href="http://leechenglong.github.io/blog/2015/03/27/reactivecocoashi-li-ying-yong/"/>
    <updated>2015-03-27T16:55:29+08:00</updated>
    <id>http://leechenglong.github.io/blog/2015/03/27/reactivecocoashi-li-ying-yong</id>
    <content type="html"><![CDATA[<p>本部分我们将要开发的是一个称为BIP搜索程序，用于搜索同事资料。同时我们需要通过Cocoapods来下载依赖库，这个过程与之前的ReactiveCocoa入门教程说的相同。完成之后，运行程序，将得到下面的界面：<br>&lt;!—more—>
<img src="http://leechenglong.github.io/images/ReactiveCocoa/LCLStudyProject_ReactiveCocoa_search.png" width="256" height="454"><br>
验证搜索框<br>
首先我们来校验输入框的字符长度是否大于2。我们在LCLBipSearchViewController.m的viewDidLoad方法下面添加以下代码：</p>

<pre>
- (BOOL)isValidSearchText:(NSString *)text{
    return text.length > 5;
}
</pre>


<p>同时在viewDidLoad方法最后加上以下代码：</p>

<pre>
    @weakify(self);
    
    [[self_weak_.textField.rac_textSignal map:^id(NSString *text) {
        return [self_weak_ isValidSearchText:text] ? [UIColor whiteColor] : [UIColor redColor];
    }] subscribeNext:^(UIColor *color) {
        self_weak_.textField.backgroundColor = color;
    }];
</pre>


<p>这段代码通过信号来检测输入是否有效，并设置相应的输入框背影颜色值。运行后，可以看到如下效果：<br>
<img src="http://leechenglong.github.io/images/ReactiveCocoa/LCLStudyProject_ReactiveCocoa_text.png" width="256" height="454"><br>
其管道流程图如下所示：<br>
<img src="http://leechenglong.github.io/images/ReactiveCocoa/TextValidationPipeline.png"><br>
rac_textSignal在每次输入时发出next事件，并包含当前输入框的文本。然后map操作将其转换为颜色值，最后subscribeNext:获取这个颜色值并用它来设置输入框的背景颜色。</p>

<h4>内存管理</h4>

<p>想知道我们创建的管道信号是如何被保存的么？当然，因为它没有被指定给变量或属性，所以它没有增加引用计数，因此注定被销毁？ReactiveCocoa设计的目的之一是允许这样一种编程样式，即管道可以匿名创建。到目前为止，我们的管道都是这么处理的。为了支持这种模式，ReactiveCocoa维护了一个全局的信号集合。如果信号有一个或多个订阅者，它就是可用的。如果所有订阅者都被移除了，信号就被释放了。<br>
剩下最后一个问题：如何取消对信号的订阅？在一个completed事件或error事件后，一个订阅者会自动将自己移除。手动移除可能通过RACDisposable来完成。RACSignal的所有订阅方法都返回一个RACDisposable实例，我们可以调用它的dispose方法来手动移除订阅者。如下代码所示：</p>

<pre>
RACSignal *backgroundColorSignal =
    [self.textField.rac_textSignal
     map:^id(NSString *text) {
         return [self isValidSearchText:text] ? [UIColor whiteColor] : [UIColor redColor];
     }];

RACDisposable *subscripion =
    [backgroundColorSignal subscribeNext:^(UIColor *color) {
        self.textField.backgroundColor = color;
    }];
// 在某个位置调用
[subscripion dispose];
</pre>


<p>当然实际上我们不需要这样来写，只需要知道是这么回事就行。</p>

<p>注意：如果我们创建了一个管道，但不去订阅它，则管理永远不会执行，包括任何如doNext:块这样的附加操作。</p>

<h4>避免循环引用</h4>

<p>ReactiveCocoa在幕后做了许多事情，让我们不需要担心信号的内存管理问题，但有一点关于内存管理的问题需要特别注意。我们先来看看下面的代码：</p>

<pre>[[self.textField.rac_textSignal map:^id(NSString *text) {
        return [self isValidSearchText:text] ? [UIColor whiteColor] : [UIColor redColor];
    }] subscribeNext:^(UIColor *color) {
        self.textField.backgroundColor = color;
    }];</pre>


<p>subscribeNext:块使用了self，以获取文本输入域。Block会捕获并保留闭包中的值，因此如果在self与信号之间有一个强引用，则会导致循环引用问题。这是不是问题取决于self对象的生命周期。如果self的生命周期是整个程序生存期，则没问题，好好用吧。但在大多数情况下，它确实是一个问题。<br>
为了避循环引用，使用weakself.ReactiveCocoa框架给我们提供了一个更好的选择,如下代码所示：</p>

<pre>
    @weakify(self);
    
    [[self_weak_.textField.rac_textSignal map:^id(NSString *text) {
        return [self_weak_ isValidSearchText:text] ? [UIColor whiteColor] : [UIColor redColor];
    }] subscribeNext:^(UIColor *color) {
        self_weak_.textField.backgroundColor = color;
    }];
</pre>


<p>宏@weakify与@strongify在Extended Objective-C库中引用，它们包含在ReactiveCocoa框架中。@weakify允许我们创建一些影子变量，它是都是弱引用(可以同时创建多个)，@strongify允许创建变量的强引用，这些变量是先前传递给@weakify的。<br>
最后需要注意的是，当在block中使用实例变量时，block同样会捕获self的一个强引用。我们可以打开编译器警告，来提示我们这种情况。如下所求来处理<br>
<img src="http://leechenglong.github.io/images/ReactiveCocoa/AvoidRetainSelf.png"><br></p>

<h4>请求登陆</h4>

<p>仍然在这个文件中，添加以下代码：</p>

<pre>
- (RACSignal *)requestAccessToSLXTSignal{
    
    return [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
        
        NSString *str = [NSString stringWithFormat:@"%@?api=login&userid=%@&pwd=%@", @"url", @"uid", @"password"];
        
        [[LCLARCBlockNetworkManager sharedLCLARCNetManager] startDownloadWithURLString:str  httpMethod:LCLARCHttpMethodGet useIntelligenceLoader:NO firstResponse:nil progress:nil complete:^(NSString *errorString, NSMutableData *data, NSString *url){
            
            if (data) {
                NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:nil];
                NSLog(@"%@", dic);
                
                if ([[NSString stringWithFormat:@"%@", [dic objectForKey:@"ret"]] isEqualToString:@"0"]) {
                    [subscriber sendNext:[NSNumber numberWithBool:YES]];
                    [subscriber sendCompleted];
                }else{
                    [subscriber sendError:nil];
                }
            }else{
                [subscriber sendError:nil];
            }
        } cache:nil];
        
        return nil;
    }];
}
</pre>


<p>一个信号可以发送三种事件类型：next, completed, error。<br>
在信号的整个生命周期中，都可能不会发送事件，或者发送一个或多个next事件，其后跟着completed或error事件。<br>
最后，为了使用这个信号，在viewDidLoad中添加以下代码：</p>

<pre>
    [[self_weak_ requestAccessToSLXTSignal] subscribeNext:^(id x) {
         NSLog(@"Access granted");
     } error:^(NSError *error) {
         NSLog(@"An error occurred: %@", error);
     }];
</pre>


<h4>链接信号</h4>

<p>在viewDidLoad中用下面代码来替换当前的管道：</p>

<pre>
    [[[self_weak_ requestAccessToSLXTSignal]
      then:^RACSignal *{
          return self_weak_.textField.rac_textSignal;
      }]
     subscribeNext:^(id x) {
         NSLog(@"%@", x);
     } error:^(NSError *error) {
         NSLog(@"An error occurred: %@", error);
     }];
</pre>


<p>then方法会等到completed事件发出后调用，然后订阅由block参数返回的信号。这有效地将控制从一个信号传递给下一个信号。<br></p>

<p>下一步，我们添加一个filter操作到管道，以移除无效的搜索字符串。在这个实例中，是要求输入长度不小于5：</p>

<pre>
    [[[[self_weak_ requestAccessToSLXTSignal]
       then:^RACSignal *{
           return self_weak_.textField.rac_textSignal;
       }]
      filter:^BOOL(NSString *text) {
          return [self_weak_ isValidSearchText:text];
      }]
     subscribeNext:^(id x) {
         NSLog(@"%@", x);
     } error:^(NSError *error) {
         NSLog(@"An error occurred: %@", error);
     }];
</pre>


<p>当前管道如下图所示：<br>
<img src="http://leechenglong.github.io/images/ReactiveCocoa/PipelineWithThen.png"><br>
现在我们有一个发送搜索文本的信号了，是时候用它来搜索了。接下来才是正题。<br>
接下来创建一个基于请求的信号。在LCLBipSearchViewController.m中，添加以下方法：</p>

<pre>
- (RACSignal *)signalForSearchWithText:(NSString *)text{
    
    return [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
        
        NSString  *str = [NSString stringWithFormat:@"%@?api=findstaff&w=%@",@"url", [text encodeWithUTF8]];
        
        [[LCLARCBlockNetworkManager sharedLCLARCNetManager] startDownloadWithURLString:str  httpMethod:LCLARCHttpMethodGet useIntelligenceLoader:NO firstResponse:nil progress:nil complete:^(NSString *errorString, NSMutableData *data, NSString *url){
            
            if (data) {
                NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:nil];
                NSLog(@"%@", dic);
                
                if ([[NSString stringWithFormat:@"%@", [dic objectForKey:@"ret"]] isEqualToString:@"0"]) {
                    [subscriber sendNext:dic];
                    [subscriber sendCompleted];
                }else{
                    [subscriber sendError:nil];
                }
            }else{
                [subscriber sendError:nil];
            }
        } cache:nil];
        
        return nil;
    }];
}
</pre>


<p>在前面我们学习了如何使用flattenMap来将每个next事件映射到一个新的被订阅的信号。这里我们再次使用它们。在viewDidLoad的最后用如下代码更新：</p>

<pre>
    [[[[[self_weak_ requestAccessToSLXTSignal]
        then:^RACSignal *{
            return self_weak_.textField.rac_textSignal;
        }]
       filter:^BOOL(NSString *text) {
           return [self_weak_ isValidSearchText:text];
       }]
      flattenMap:^RACStream *(NSString *text ) {
          return [self_weak_ signalForSearchWithText:text];
      }]
     subscribeNext:^(id x) {
         NSLog(@"%@", x);
     } error:^(NSError *error) {
         NSLog(@"An error occurred: %@", error);
     }];
</pre>


<h4>线程</h4>

<p>现在一定想把返回的JSON数据显示到UI上了吧，不过，在此之前我们还有一件事情需要处理。要了解这是什么，我们还需要探索一下。<br>
在下图的subscribeNext:error:中打个断点：<br>
<img src="http://leechenglong.github.io/images/ReactiveCocoa/LCLStudyProject_ReactiveCocoa_dot.png"><br>
重新运行程序,当程序运行到断点位置时可以看到类似于下图的场景：<br>
<img src="http://leechenglong.github.io/images/ReactiveCocoa/LCLStudyProject_ReactiveCocoa_Thread.png"><br>
注意，从左侧的线程列表中我们可以看到debugger到的代码并没有运行在主线程，即线程Thread 1。记住，更新UI的操作一定得在主线程中操作；因此，如果要在UI上显示用户列表，则必须切换线程。<br>
这说明了ReactiveCocoa框架的一个重要点。上面显示的操作是在信号初始发出事件时的那个线程执行。尝试在管道的其它步骤添加断点，我们会很惊奇的发现它们会运行在多个不同的线程上。<br>
因此，我们应该如何来更新UI呢？当然ReactiveCocoa也为我们解决了这个问题。我们只需要在flattenMap:后面添加deliverOn:操作：</p>

<pre>
    [[[[[[self_weak_ requestAccessToSLXTSignal]
         then:^RACSignal *{
             return self_weak_.textField.rac_textSignal;
         }]
        filter:^BOOL(NSString *text) {
            return [self_weak_ isValidSearchText:text];
        }] flattenMap:^RACStream *(NSString *text) {
            return [self_weak_ signalForSearchWithText:text];
        }]
      deliverOn:[RACScheduler mainThreadScheduler]]
     subscribeNext:^(id x) {
         NSLog(@"%@", x);
     } error:^(NSError *error) {
         NSLog(@"An error occurred: %@", error);
     }];
</pre>


<p>现在重新运行，此时我们可以看到subscribeNext:error:是运行在主线程了。<br>
<img src="http://leechenglong.github.io/images/ReactiveCocoa/LCLStudyProject_ReactiveCocoa_main.png"><br>
这样我们就可以安全地更新我们的UI了，在viewDidLoad代码中做如下修改：</p>

<pre>
    [[[[[[self_weak_ requestAccessToSLXTSignal]
         then:^RACSignal *{
             return self_weak_.textField.rac_textSignal;
         }]
        filter:^BOOL(NSString *text) {
            return [self_weak_ isValidSearchText:text];
        }]
       flattenMap:^RACStream *(NSString *text) {
           return [self_weak_ signalForSearchWithText:text];
       }]
      deliverOn:[RACScheduler mainThreadScheduler]]
     subscribeNext:^(NSDictionary *jsonSearchResult) {
         
         NSArray *statuses = jsonSearchResult[@"info"];
         self_weak_.dataSource = [[NSMutableArray alloc] initWithArray:statuses];
         [self_weak_.tableView reloadData];
         
     } error:^(NSError *error) {
         NSLog(@"An error occurred: %@", error);
     }];
</pre>


<p>运行程序后我们可以看到以下UI：<br>
<img src="http://leechenglong.github.io/images/ReactiveCocoa/LCLStudyProject_ReactiveCocoa_show.png" width="256" height="454"><br></p>

<h4>节流</h4>

<p>你可能已经发现每次我们输入一个新的字符时，搜索操作都会立即执行。如果我们快速输入，可能会导致程序在一秒钟内执行了多次搜索操作。这当然是不好的，因为：
<li>我们多次调用了搜索API，同时扔掉了大部分结果。</li>
<li>我们不断更新结果会分散用户的注意力。</li>
<li>我们不断搜索浪费流量</li></p>

<p>一个更好的方案是如果搜索文本在一个较短时间内没有改变时我们再去执行搜索操作，如500毫秒。ReactiveCocoa框架让这一任务变得相当简单。<br>
打开LCLBipSearchViewController.m并更新管道操作：</p>

<pre>
    [[[[[[[self_weak_ requestAccessToSLXTSignal]
          then:^RACSignal *{
              return self_weak_.textField.rac_textSignal;
          }]
         filter:^BOOL(NSString *text) {
             return [self_weak_ isValidSearchText:text];
         }]
        throttle:2]
       flattenMap:^RACStream *(NSString *text) {
           return [self_weak_ signalForSearchWithText:text];
       }]
      deliverOn:[RACScheduler mainThreadScheduler]]
     subscribeNext:^(NSDictionary *jsonSearchResult) {
         
         NSArray *statuses = jsonSearchResult[@"info"];
         self_weak_.dataSource = [[NSMutableArray alloc] initWithArray:statuses];
         [self_weak_.tableView reloadData];

     } error:^(NSError *error) {
         NSLog(@"An error occurred: %@", error);
         
         self_weak_.dataSource = [[NSMutableArray alloc] init];
         [self_weak_.tableView reloadData];
     }];
</pre>


<p>throttle操作只有在两次next事件间隔指定的时间时才会发送第二个next事件。相当简单吧。运行程序看看效果吧。<br></p>

<p>在庆祝胜利前，看看程序最终的管道是值得的。<br>
<img src="http://leechenglong.github.io/images/ReactiveCocoa/CompletePipeline.png"><br></p>

<h4>小结</h4>

<p>这是一个相当复杂的数据流，但可以作为一个响应管道简洁地表示出来。看起来不错吧。如果使用非响应式技术，你会觉得这会有多复杂呢？在这样一个程序中，数据流的流动又会是多难以理解呢？听起来很麻烦吧。但有了ReactiveCocoa，我们不必再考虑这些了。现在我们知道ReactiveCocoa有多棒了吧。</p>

<p>*学习了 <a href="http://southpeak.github.io/blog/2014/08/02/reactivecocoazhi-nan-er-:twittersou-suo-shi-li/">ReactiveCocoa指南二：Twitter搜索实例</a> 之后自己做的demo
<br><br><br></p>

<hr />

<p>Deeply thanks all the people who make me grow up!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveCocoa 入门]]></title>
    <link href="http://leechenglong.github.io/blog/2015/03/25/reactivecocoa/"/>
    <updated>2015-03-25T15:53:18+08:00</updated>
    <id>http://leechenglong.github.io/blog/2015/03/25/reactivecocoa</id>
    <content type="html"><![CDATA[<h4>目录</h4>

<p><a href="#h_1">什么是ReactiveCocoa</a></br>
<a href="#h_2">ReactiveCocoa的特点</a></br>
<a href="#h_3">ReactiveCocoa试图解决什么问题</a></br>
<a href="#h_4">ReactiveCocoa的引入</a></br>
<a href="#h_5">ReactiveCocoa的使用</a></br><br></p>

<h4><a name="h_1">什么是ReactiveCocoa</a></h4>

<p>ReactiveCocoa（RAC）是一个基于Functional Reactive Programming编程思想的Objective-C实现的由Github开源的应用于iOS和OS X开发的新框架。它主要吸取了.Net的 Reactive Extensions的设计和实现。通常我们在编写iOS代码时，大部分代码都是在响应一些事件：按钮点击、接收网络消息、属性变化等等，但是这些事件在代码中的表现形式却不一样：如target-action、代理方法、KVO、回调或其它，这时ReactiveCocoa的作用就体现出来了。它的目的就是定义一个统一的事件处理接口，这样事件处理可以非常简单地进行链接、过滤和组合。&lt;!—more—></p>

<h4><a name="h_2">ReactiveCocoa的特点</a></h4>

<p>ReactiveCocoa的核心是Signal。Signal是信号，是一个事件流。Signal获取到数据后，会调用Subscriber的sendNext, sendComplete, sendError方法来传送数据给Subscriber。Signal是很灵活的，它可以被修改(map)，过滤(filter)，叠加(combine)，串联(chain)。<br>
这样讲得也太过于抽象了吧^_^，我自己也不知道自己在说什么。<br>
其实ReactiveCocoa提供了一个标准的接口来处理不同的事件，这个接口就是信号，由RACSignal类表示，也就是Singal。而这些不同的事件流就是KVO、UI Event、Network request、Async work的处理。比如在你需要用到Notification的时候，你完全可以使用RACSignal来替代Notification，observer在接收到信息回调这个过程就相当于Signal调用Subscriber的sendNext的过程。<br>
现在对于ReactiveCocoa的Signal好像有点了解了，哈哈！<br>
前面也说了，ReactiveCocoa是一个基于Functional Reactive Programming编程思想的Objective-C实现开源的第三方库，也就是：<pre>Functional Reactive Programming = Functional programming + Reactive Programming</pre>
所以RAC的两个重要特性是：
<li>函数式编程：这也是一种编程方法，或者说是编程模式，同面向过程的编程，以及面向对象的编程、面向逻辑的编程一样。它利用高阶函数，即将函数作为其它函数的参数。</li>
<li>响应式编程：在计算机中，响应式编程是一种面向数据流和变化传播的编程范式。这意味着可以在编程语言中很方便地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。例如，在命令式编程环境中，a = b + c 表示将表达式的结果赋给a，而之后改变b或c的值不会影响a。但在响应式编程中，a的值会随着b或c的更新而更新。</li>
Reactive的特性使得可以随时响应变化。Functional的特性使得他们可以串起来。ReactiveCocoa就是他们的结合体。</p>

<h4><a name="h_3">ReactiveCocoa试图解决什么问题</a></h4>

<p>>1.传统iOS开发过程中，状态以及状态之间依赖过多的问题<br>
>2.传统MVC架构的问题：Controller比较复杂，可测试性差<br>
>3.提供统一的消息传递机制
<br>举例：</p>

<h6>1.传统iOS开发过程中，状态以及状态之间依赖过多的问题</h6>

<p>我们在开发iOS应用时，一个界面元素的状态很可能受多个其它界面元素或后台状态的影响。<br>
例如，在用户帐户的登录界面，通常会有2个输入框（分别输入帐号和密码）和一个登录按钮。如果我们要加入一个限制条件：当用户输入完帐号和密码，并且登录的网络请求还未发出时，确定按钮才可以点击。通常情况下，我们需要监听这两个输入框的状态变化以及登录的网络请求状态，然后修改另一个控件的状态.<br>
<img src="http://leechenglong.github.io/images/ReactiveCocoa/LCLStudyProject_ReactiveCococa_login.png">
<br>一般写法如下：</p>

<pre>
static void *ObservationContext = &ObservationContext;

- (void)viewDidLoad {
    [super viewDidLoad];

    [[LCLSignInModule shareLCLSignInModule] addObserver:self forKeyPath:@"login" options:NSKeyValueObservingOptionInitial context:&ObservationContext];
    
    [self.userNameTextField addTarget:self action:@selector(updateLoginButton)             forControlEvents:UIControlEventEditingChanged];
    
    [self.passwordTextField addTarget:self action:@selector(updateLoginButton)    forControlEvents:UIControlEventEditingChanged];
}

- (void)updateLoginButton {
    BOOL textFieldsNonEmpty = self.userNameTextField.text.length > 0 && self.passwordTextField.text.length > 0;
    self.loginButton.enabled = textFieldsNonEmpty && ![[LCLSignInModule shareLCLSignInModule].login boolValue];
}

- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {
    if (context == ObservationContext) {
        [self updateLoginButton];
    } else {
        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];
    }
}</pre>


<p>RAC通过引入信号（Signal）的概念，来代替传统iOS开发中对于控件状态变化检查的代理（delegate）模式或target-action模式。因为RAC的信号是可以组合（combine）的，所以可以轻松地构造出另一个新的信号出来，然后将按钮的enabled状态与新的信号绑定。如下所示：</p>

<pre>
RACSignal *validLoginSignal = RACObserve([LCLSignInModule shareLCLSignInModule], login);

RAC(self.loginButton, enabled) = [RACSignal
    combineLatest:@[
        self.userNameTextField.rac_textSignal,
        self.passwordTextField.rac_textSignal,
        validLoginSignal
    ] reduce:^(NSString *username, NSString *password, NSNumber *loginIn) {
        return @(username.length > 0 && password.length > 0 && !loginIn.boolValue);
    }];
</pre>


<p>可以看到，在引入RAC之后，以前散落在action-target或KVO的回调函数中的判断逻辑被统一到了一起，从而使得登录按钮的enabled状态被更加清晰地表达了出来。<br>
除了组合（combine）之外，RAC的信号还支持链式（chaining）和过滤（filter)，以方便将信号进行进一步处理。</p>

<h6>2.传统MVC架构的问题：Controller比较复杂，可测试性差</h6>

<p>对于传统的Model-View-Controller（MVC）的框架，Controller很容易变得比较庞大和复杂(如前面所说的多状态之间的依赖也会导致代码的臃肿)。由于Controller承担了Model和View之间的桥梁作用，所以Controller常常与对应的View和Model的耦合度非常高。<br></p>

<p>RAC的信号机制很容易将某一个Model变量(或者不单是Model)的变化与界面关联，所以非常容易应用Model-View-ViewModel（MVVM）框架。它跟MVC最大的区别是多了个ViewModel。它直接与View绑定，而且对View一无所知。使用ViewModel的好处是，可以让Controller更加简单和轻便，而且ViewModel相对独立，也更加方便测试和重用。那Controller这时又该做哪些事呢？在MVVM体系中，Controller可以被看成View，所以它的主要工作是处理布局、动画、接收系统事件、展示UI。MVVM还有一个很重要的概念是 data binding，view的呈现需要data，这个data就是由ViewModel提供的，将view的data与ViewModel的data绑定后，将来双方的数据只要一方有变化，另一方就能收到。<br></p>

<p>MVVM把应用程序划分成视图、视图模型和模型三层，如下图所示：<br>
<img src="http://leechenglong.github.io/images/ReactiveCocoa/LCLStudyProject_ReactiveCocoa_MVVM.jpg"><br>
表面上，这个层次结构还蛮清楚的，但如果你细究每层应该包含什么，事情就没那么简单了。</p>

<p>MVVM模式和MVC模式一样，主要目的是分离视图（View）和模型（Model），有几大优点:<br>
1. 低耦合。视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的&#8221;View&#8221;上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。<br>
2. 可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。<br>
3. 独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xaml代码。<br>
4. 可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写。<br></p>

<p>InfoQ也曾撰文介绍过MVVM：<a href="http://www.infoq.com/cn/articles/mvvm-revelation/">《MVVM启示录》</a> 或者 <a href="http://baike.baidu.com/view/3507915.htm">MVVM中文wiki</a></p>

<h6>3.提供统一的消息传递机制</h6>

<p>iOS开发中有着各种消息传递机制，包括KVO、Notification、delegation、block以及target-action方式。各种消息传递机制使得开发者在做具体选择时感到困惑。<br>
RAC将传统的UI控件事件进行了封装，使得以上各种消息传递机制都可以用RAC来完成。示例代码如下：</p>

<pre>
    @weakify(self);

    //kvo    
    [RACObserve(self_weak_, username) subscribeNext:^(NSString *newName) {
        NSLog(@"property_username:%@", newName);
    }];
    
    //delegate
    [self_weak_.userNameTextField.rac_textSignal subscribeNext:^(id x){
    
        NSLog(@"non_filter_unameTextField:%@", x);
    }];
    
    [[self rac_signalForSelector:@selector(viewWillAppear:)] subscribeNext:^(id x) {
    debugLog(@"viewWillAppear方法被调用 %@", x);
}];

    //target action
        [[[[self_weak_.loginButton rac_signalForControlEvents:UIControlEventTouchUpInside] doNext:^(UIButton *button){
    
    }] flattenMap:^RACStream *(id x){
    
        return [self_weak_ signInSignal];
        
    }] subscribeNext:^(NSDictionary *dic){
        
        NSLog(@"%@", dic);
    }];

    // Notification
    [[[NSNotificationCenter defaultCenter] rac_addObserverForName:UIKeyboardDidChangeFrameNotification object:nil] subscribeNext:^(id x) {
        NSLog(@"键盘Frame改变");
    }];
</pre>


<h4><a name="h_4">ReactiveCocoa的引入</a></h4>

<p>添加ReactiveCocoa框架到我们工程的最简单的方法是使用Cocoapods。我们新建一个项目LCLStudyProject。在控制进入该项目下，输入以下命令：<code>pod init</code> 它会自动创建一个名为Podfile的空文件,打开并添加如下信息:</p>

<pre>platform :ios, '6.0'
inhibit_all_warnings!
xcodeproj 'LCLStudyProject'

target :LCLStudyProject do
    pod 'ReactiveCocoa', '~> 2.3.1'
end

post_install do |installer|
installer.project.targets.each do |target|
puts "#{target.name}"
end

end</pre>


<p>配置完成后保存文件，打开终端并转到工程所在目录，然后输入以下命令：</p>

<pre>pod install</pre>


<p>然后终端会有如下输出:</p>

<pre>Analyzing dependencies
Downloading dependencies
Installing ReactiveCocoa (2.3.1)
Generating Pods project
Pods-LCLStudyProject-ReactiveCocoa
Pods-LCLStudyProject
Integrating client project

[!] From now on use `LCLStudyProject.xcworkspace`.</pre>


<p>这表示已经下载了ReactiveCocoa框架，同时Cocoapods创建了一个Xcode workspace，同时将框架整合到了我们的工程中。打开新生成的workspace文件(LCLStudyProject.xcworkspace)，将看到如下的工程结构：<br>
<img src="http://leechenglong.github.io/images/ReactiveCocoa/LCLStudyProject_ReactiveCocoa.png" width="170" height="227">
<br>做完这一切后，我们就可以开始玩了，哈哈。<br>
打开程序的初始视图控制器LCLStudyReactiveCocoaViewController.m文件，在文件头部导入以下头文件：
<code>#import &ldquo;ReactiveCocoa.h&rdquo;</code>
<br>新建属性：</p>

<pre>@property (strong, nonatomic) NSString *username;</pre>


<p>在viewDidLoad方法里面写上：</p>

<pre>
    @weakify(self);
    
    [RACObserve(self_weak_, username) subscribeNext:^(NSString *newName) {
        NSLog(@"property_username:%@", newName);
    }];
</pre>


<p>定义一个定时器来修改username的值：</p>

<pre>
@interface LCLStudyReactiveCocoaViewController (){

    NSTimer *timer;
}

- (void)viewWillAppear:(BOOL)animated{
    timer = [NSTimer timerWithTimeInterval:20.0 target:self selector:@selector(updateNameAction)userInfo:nil repeats:YES];
    [[NSRunLoop  currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];
}

- (void)updateNameAction{
    int ttt = random()%5;
    self.username = [NSString stringWithFormat:@"%d", ttt];
}
</pre>


<p>运行程序，我们可以看到控制台会有如下输出：</p>

<pre>
2015-03-26 17:10:08.771 LCLStudyProject[16137:236449] property_username:3
2015-03-26 17:10:28.771 LCLStudyProject[16137:236449] property_username:1
2015-03-26 17:10:48.771 LCLStudyProject[16137:236449] property_username:2
2015-03-26 17:11:08.772 LCLStudyProject[16137:236449] property_username:0
</pre>


<p>基本引入使用讲得差不多了，我们继续吧！！！</p>

<h4><a name="h_5">ReactiveCocoa的使用</a></h4>

<p>RAC在应用中大量使用了block，由于Objective-C语言的内存管理是基于引用计数的，为了避免循环引用问题，在block中如果要引用self，需要使用@weakify(self)和@strongify(self)来避免强引用。另外，在使用时应该注意block的嵌套层数，不恰当的滥用多层嵌套block可能给程序的可维护性带来灾难。</p>

<p>ReactiveCocoa信号发送一个事件流到它们的订阅者中。我们需要知道三种类型的事件：next, error和completed。一个信号可能由于error事件或completed事件而终止，在此之前它会发送很多个next事件。在这一部分中，我们将重点关注next事件。</p>

<p>举个简单的例子：</p>

<pre>
@property (strong, nonatomic) NSString *username;

    @weakify(self);
    
    [RACObserve(self_weak_, username) subscribeNext:^(NSString *newName) {
        NSLog(@"property_username:%@", newName);
    }];
</pre>


<p>过滤：</p>

<pre>
    [[self_weak_.userNameTextField.rac_textSignal filter:^BOOL(id x){
    
        NSString *text = x;
        
        return [text hasPrefix:@"lcl"];
        
    }] subscribeNext:^(id x){
        
        NSLog(@"filter_unameTextField:%@", x);
    }];
</pre>


<p>映射：</p>

<pre>
    [[[self_weak_.userNameTextField.rac_textSignal map:^id(id x){
        NSString *text = x;
        return [NSNumber numberWithUnsignedLong:text.length];
        
    }] filter:^BOOL(NSNumber *x){
    
        return [x integerValue]>3;
        
    }] subscribeNext:^(id x){
    
        NSLog(@"map_filter_unameTextField_length:%@", x);
    }];
</pre>


<p>组合：</p>

<pre>
    RACSignal *combineSinal = [RACSignal combineLatest:[NSArray arrayWithObjects:validUserNameSinal, validPasswordSinal, validLoginSignal, nil] reduce:^id(NSNumber *userNameValid, NSNumber *passwordValid, NSNumber *loginValid){
            
            return [NSNumber numberWithBool:[userNameValid boolValue] && [passwordValid boolValue] && !loginValid.boolValue];
        }];
        
        [combineSinal subscribeNext:^(NSNumber *x){
        
            [self_weak_.loginButton setEnabled:[x boolValue]];
            [self_weak_.userNameTextField setEnabled:![x boolValue]];
            [self_weak_.passwordTextField setEnabled:![x boolValue]];
        }];
</pre>


<p>创建：</p>

<pre>
- (RACSignal *)signInSignal{
    
    @weakify(self);
    
    return [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
        
        [[LCLSignInModule shareLCLSignInModule] signInWithUsername:self_weak_.userNameTextField.text password:self_weak_.passwordTextField.text complete:^(NSDictionary *dic) {
            
            [subscriber sendNext:dic];
            
            if (dic) {
                [subscriber sendCompleted];
            }else{
                [subscriber sendError:nil];
            }
        }];
        
        return nil;
    }];
}
</pre>


<p>上面的代码创建了一个使用当前用户名与密码登录的信号。现在我们来分解一下这个方法。createSignal:方法用于创建一个信号。描述信号的block是一个信号参数，当信号有一个订阅者时，block中的代码会被执行。</p>

<p>block传递一个实现RACSubscriber协议的subscriber(订阅者)，这个订阅者包含我们调用的用于发送事件的方法；我们也可以发送多个next事件，这些事件由一个error事件或complete事件结束。在上面这种情况下，它发送一个next事件来表示登录是否成功，后续是一个complete事件。</p>

<p>这个block的返回类型是一个RACDisposable对象，它允许我们执行一些清理任务，这些操作可能发生在订阅取消或丢弃时。上面这个这个信号没有任何清理需求，所以返回nil。</p>

<p>其他：
<li>当一个signal被一个subscriber subscribe后，这个subscriber何时会被移除？答案是当subscriber被sendComplete或sendError时，或者手动调用[disposable dispose]。</li></p>

<p><li>当subscriber被dispose后，所有该subscriber相关的工作都会被停止或取消，如http请求，资源也会被释放。</li></p>

<p><li>Signal events是线性的，不会出现并发的情况，除非显示地指定Scheduler。所以-subscribeNext:error:completed:里的block不需要锁定或者synchronized等操作，其他的events会依次排队，直到block处理完成。</li></p>

<p><li>Errors有优先权，如果有多个signals被同时监听，只要其中一个signal sendError，那么error就会立刻被传送给subscriber，并导致signals终止执行。相当于Exception。</li></p>

<h5>小结</h5>

<p>其实我对ReactiveCocoa了解还是在初级阶段，很多东西都理解的很粗糙。ReactiveCocoa这个我觉得是可以作为一个系列来写，不过想了想我这种level，也写不出这么多东西来，暂时凑合着搞出一篇就好了^_^。
<br><br><br></p>

<hr />

<p>Deeply thanks all the people who make me grow up!</p>
]]></content>
  </entry>
  
</feed>
