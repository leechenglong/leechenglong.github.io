<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lee]]></title>
  <link href="http://leechenglong.github.io/atom.xml" rel="self"/>
  <link href="http://leechenglong.github.io/"/>
  <updated>2015-03-27T00:21:16+08:00</updated>
  <id>http://leechenglong.github.io/</id>
  <author>
    <name><![CDATA[LiChenglong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Build Octopress Based on Github]]></title>
    <link href="http://leechenglong.github.io/blog/2015/03/25/macda-jian-ji-yu-githubde-octopressjian-yi-jiao-cheng/"/>
    <updated>2015-03-25T16:25:03+08:00</updated>
    <id>http://leechenglong.github.io/blog/2015/03/25/macda-jian-ji-yu-githubde-octopressjian-yi-jiao-cheng</id>
    <content type="html"><![CDATA[<h4>目录</h4>

<p><a href="#h_1">1.Install Ruby</a></br>
<a href="#h_2">2.Install Octopress</a></br>
<a href="#h_3">3.Configure Octopress</a></br>
<a href="#h_4">4.Configure Disqus Plugin</a></br>
<a href="#h_5">5.Configure Things related to Github</a></br>
<a href="#h_6">6.Deploy The Blog to Github</a></br>
<a href="#h_7">7.Write Blog</a></br>
<a href="#h_8">8.Change Theme</a></br>
<a href="#h_9">9.Submite codes for backup</a></br></p>

<p>Notice：Make sure that you have installed Git and Ruby1.9.3. Then install rbenv via brew and use rbven to install Ruby. The local deployed environment is in the MAC OS X system under Yosemite 10.10.2.</p>

<h4><a name="h_1">1.Install Ruby</a></h4>

<p><li>brew install rbenv </li>
<li>brew install ruby-build</li>
<li>rbenv install 1.9.3-p0</li>
<li>rbenv rehash</li></p>

<h4><a name="h_2">2.Install Octopress</a></h4>

<p><li>git clone git://github.com/imathis/octopress.git octopress</li>
<li>cd octopress</li>
<li>gem install bundler</li>
<li>rbenv rehash</li>
<li>bundle install //will install a lot of package⋯⋯</li>
<li>rake install</li></p>

<h4><a name="h_3">3.Configure Octopress</a></h4>

<p>Edit URL/Title/Subtitle/Author in the file, called &ldquo;config.yml&rdquo;.<br>
You&rsquo;d better delete all the infomation, related to Twitter, or the Page&rsquo;ll be loaded slowly because of the GFW。By the same way, delete the words, customized by Google in the file, called &ldquo;head.html&rdquo;, which can be found in the path &ldquo;/source/_includes/custom/head.html&rdquo;.</p>

<h4><a name="h_4">4.Configure Disqus Plugin</a></h4>

<p>Disqus is a plugin, builded in Octopress, which can be opend in the file &ldquo;config.yml&rdquo;. For example: find out the next words,<br></p>

<pre>#Disqus comments<br>
disqus_short_name: <br>
disqus_show_comment_count: false</pre>


<p>then fill in with <a href="https://disqus.com/">disqus</a> name and set disqus_show_comment_count true.【The Disqus name should be related to &lsquo;username.github.com&#8217;】</p>

<h4><a name="h_5">5.Configure Things related to Github</a></h4>

<p>Create ssh in the local environment
<li>cd ~/.ssh</li>
<li>ssh-keygen -t rsa -C X //X is the regist Email in Github</li>
<li>when it throws out: Enter file in which to save the key (/Users/twer/.ssh/id_rsa): just clik the space button and then click enter</li>
<li>when it throws out: Enter passphrase (empty for no passphrase), just input your Github&rsquo;s password. Then if it shows: Enter same passphrase again, don&rsquo;t worry, just input your Github&rsquo;s password again.</li>
<li>Open the corresponding file &lsquo;.pub&rsquo; int the path &lsquo;~/.ssh&rsquo; and copy all the contents in the file.</li>
<li>sign in Github and change to Account Settings, select SSH Public Keys.Then Tap add ssh and fill in with the contents, which are copied just now and then save it.</li></p>

<p>Test shh:<br>
>ssh <a href="&#x6d;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#x67;&#x69;&#116;&#x40;&#103;&#105;&#x74;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#x67;&#105;&#116;&#64;&#x67;&#x69;&#x74;&#x68;&#117;&#98;&#46;&#99;&#x6f;&#109;</a>
<br>Output:</p>

<pre>PTY allocation request failed on channel 0
Hi username! You've successfully authenticated, but GitHub does not provide shell access.
Connection to github.com closed.</pre>


<p>It means success!</p>

<h4><a name="h_6">6.Deploy The Blog to Github</a></h4>

<p>You can configure the warehouse, created in Github above, by the rake operation under Octopress. For example, we can deploy the Github page by typing the commands like:<br>
<code>rake setup_github_pages</code><br>
then it&rsquo;ll show the address like: <code>git@github.com:your_username/your_username.github.com.git</code>. Don&rsquo;t use this, just input yours【Mine is <a href="https://github.com/leechenglong/leechenglong.github.io"><a href="https://github.com/leechenglong/leechenglong.github.io">https://github.com/leechenglong/leechenglong.github.io</a></a>】
<br>You can use the following commands to deploy your blog:
<li>rake install  //Installing the default Octopress theme</li>
<li>rake generate  //Creating a static page. The above and this command is necessary</li>
<li>rake preview  //Preview in the local environment through typing &lsquo;<a href="http://localhost:4000/">http://localhost:4000/</a>&rsquo; in the browser</li>
<li>rake deploy  //Deploy your pages or articles</li></p>

<p>Attention：<br>
Maybe the first time you run &lsquo;rake deploy&rsquo;, it&rsquo;ll show the error like:<br></p>

<pre><code>! [rejected]  master -> master (non-fast-forward)
error: failed to push some refs to 'https://github.com/leechenglong/leechenglong.github.io'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
hint: before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.</code></pre>


<p>Don&rsquo;t worry! You can solve it by opening the folder named &lsquo;<em>deploy&rsquo; yourself and forch to push it。For example:
<li>cd octopress/</em>deploy</li>
<li>git pull origin +master</li>
<li>cd ..</li>
<li>rake deploy</li>
Finally, you&rsquo;ll fine the error has dismissed.</p>

<h4><a name="h_7">7.Write Blog</a></h4>

<p>You can write an article in the folder &lsquo;source/_posts&rsquo; by the command like:<code>rake new_post[&ldquo;myTitle&rdquo;]</code>. The article is Markdown format and you can edit it through <a href="http://25.io/mou/">Mou</a>.After that you can deploy the article to Github by these steps:
<li>rake generate</li>
<li>git add .</li>
<li>git commit -am &ldquo;Some comment here.&rdquo; </li>
<li>git push origin source</li>
<li>rake deploy</li></p>

<h6>New a page</h6>

<p>You can add a page in your blog everywhere and Jekyll will generate a url according to the location of the page  automaticly. For example, if adding a page named about.markdown, it&rsquo;ll generate the url like &lsquo;site.com/about.html&rsquo;.Also if you want a url like &lsquo;site.com/about/&rsquo;, you just need to generate a page like about/index.markdown. Don&rsquo;t worry, Octopress can help you to do this like:
<li>rake new_page[super-awesome]</li>
<code>#creates /source/super-awesome/index.markdown</code>
<li>rake new_page[super-awesome/page.html]</li>
<code>#creates /source/super-awesome/page.html</code></p>

<h4><a name="h_8">8.Change Theme</a></h4>

<p>The themes is in the folder &lsquo;octopress/.theme&rsquo; and the default theme style is Classic. You can download themes in the Internet and put them in the folder &lsquo;.theme&rsquo;. If the theme name is blog_theme, you can install it by writing command in command center like:<br>
<code>rake install [&lsquo;blog_theme&rsquo;]</code></p>

<h4><a name="h_9">9.Submite codes for backup</a></h4>

<p>The above steps can only deploy the blog codes to Github, not the Octopress source codes. So in order to write blog wherever and whenever you are, you can push the Octopress source codes to Github under the Source branch. It doesn&rsquo;t need to configure the details that you can keep the local Octopress source codes same with codes in Github after typing the commands like:</p>

<pre>
git add .<br>
git commit -m 'Initial source commit'<br>
git push origin source
</pre>


<h6>Summary</h6>

<p>This article tells us how to setup a blog through Octopress based on Github and introduce the simple ways to post articles or new a page.
<br><br><br></p>

<hr />

<p>Deeply thanks all the people who make me grow up!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveCocoa 入门]]></title>
    <link href="http://leechenglong.github.io/blog/2015/03/25/reactivecocoa/"/>
    <updated>2015-03-25T15:53:18+08:00</updated>
    <id>http://leechenglong.github.io/blog/2015/03/25/reactivecocoa</id>
    <content type="html"><![CDATA[<h4>什么是ReactiveCocoa</h4>

<p>ReactiveCocoa（RAC）是一个基于Functional Reactive Programming编程思想的Objective-C实现的由Github开源的应用于iOS和OS X开发的新框架。它主要吸取了.Net的 Reactive Extensions的设计和实现。通常我们在编写iOS代码时，大部分代码都是在响应一些事件：按钮点击、接收网络消息、属性变化等等，但是这些事件在代码中的表现形式却不一样：如target-action、代理方法、KVO、回调或其它，这时ReactiveCocoa的作用就体现出来了。它的目的就是定义一个统一的事件处理接口，这样事件处理可以非常简单地进行链接、过滤和组合。</p>

<h4>ReactiveCocoa的特点</h4>

<p>ReactiveCocoa的核心是Signal。Signal是信号，是一个事件流。Signal获取到数据后，会调用Subscriber的sendNext, sendComplete, sendError方法来传送数据给Subscriber。Signal是很灵活的，它可以被修改(map)，过滤(filter)，叠加(combine)，串联(chain)。<br>
这样讲得也太过于抽象了吧^_^，我自己也不知道自己在说什么。<br>
其实ReactiveCocoa提供了一个标准的接口来处理不同的事件，这个接口就是信号，由RACSignal类表示，也就是Singal。而这些不同的事件流就是KVO、UI Event、Network request、Async work的处理。比如在你需要用到Notification的时候，你完全可以使用RACSignal来替代Notification，observer在接收到信息回调这个过程就相当于Signal调用Subscriber的sendNext的过程。<br>
现在对于ReactiveCocoa的Signal好像有点了解了，哈哈！<br>
前面也说了，ReactiveCocoa是一个基于Functional Reactive Programming编程思想的Objective-C实现开源的第三方库，也就是：<pre>Functional Reactive Programming = Functional programming + Reactive Programming</pre>
所以RAC的两个重要特性是：
<li>函数式编程：这也是一种编程方法，或者说是编程模式，同面向过程的编程，以及面向对象的编程、面向逻辑的编程一样。它利用高阶函数，即将函数作为其它函数的参数。</li>
<li>响应式编程：在计算机中，响应式编程是一种面向数据流和变化传播的编程范式。这意味着可以在编程语言中很方便地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。例如，在命令式编程环境中，a = b + c 表示将表达式的结果赋给a，而之后改变b或c的值不会影响a。但在响应式编程中，a的值会随着b或c的更新而更新。</li>
Reactive的特性使得可以随时响应变化。Functional的特性使得他们可以串起来。ReactiveCocoa就是他们的结合体。</p>

<h4>ReactiveCocoa的引入</h4>

<p>添加ReactiveCocoa框架到我们工程的最简单的方法是使用Cocoapods。我们新建一个项目LCLStudyProject。在控制进入该项目下，输入以下命令：<code>pod init</code> 它会自动创建一个名为Podfile的空文件,打开并添加如下信息:</p>

<pre>platform :ios, '6.0'
inhibit_all_warnings!
xcodeproj 'LCLStudyProject'

target :LCLStudyProject do
    pod 'ReactiveCocoa', '~> 2.3.1'
end

post_install do |installer|
installer.project.targets.each do |target|
puts "#{target.name}"
end

end</pre>


<p>配置完成后保存文件，打开终端并转到工程所在目录，然后输入以下命令：</p>

<pre>pod install</pre>


<p>然后终端会有如下输出:</p>

<pre>Analyzing dependencies
Downloading dependencies
Installing ReactiveCocoa (2.3.1)
Generating Pods project
Pods-LCLStudyProject-ReactiveCocoa
Pods-LCLStudyProject
Integrating client project

[!] From now on use `LCLStudyProject.xcworkspace`.</pre>


<p>这表示已经下载了ReactiveCocoa框架，同时Cocoapods创建了一个Xcode workspace，同时将框架整合到了我们的工程中。打开新生成的workspace文件(LCLStudyProject.xcworkspace)，将看到如下的工程结构：<br>
<img src="http://leechenglong.github.io/images/LCLStudyProject_ReactiveCocoa.png" width="170" height="227">
<br>做完这一切后，我们就可以开始玩了，哈哈。<br>
打开程序的初始视图控制器LCLStudyReactiveCocoaViewController.m文件，在文件头部导入以下头文件：
<code>#import &ldquo;ReactiveCocoa.h&rdquo;</code>
<br>新建属性：</p>

<pre>@property (strong, nonatomic) NSString *username;</pre>


<p>在viewDidLoad方法里面写上：</p>

<pre>
    @weakify(self);
    
    [RACObserve(self_weak_, username) subscribeNext:^(NSString *newName) {
        NSLog(@"property_username:%@", newName);
    }];
</pre>


<p>定义一个定时器来修改username的值：</p>

<pre>
@interface LCLStudyReactiveCocoaViewController (){

    NSTimer *timer;
}

- (void)viewWillAppear:(BOOL)animated{
    timer = [NSTimer timerWithTimeInterval:20.0 target:self selector:@selector(updateNameAction)userInfo:nil repeats:YES];
    [[NSRunLoop  currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];
}

- (void)updateNameAction{
    int ttt = random()%5;
    self.username = [NSString stringWithFormat:@"%d", ttt];
}
</pre>


<p>运行程序，我们可以看到控制台会有如下输出：</p>

<pre>
2015-03-26 17:10:08.771 LCLStudyProject[16137:236449] property_username:3
2015-03-26 17:10:28.771 LCLStudyProject[16137:236449] property_username:1
2015-03-26 17:10:48.771 LCLStudyProject[16137:236449] property_username:2
2015-03-26 17:11:08.772 LCLStudyProject[16137:236449] property_username:0
</pre>


<p>基本引入使用讲得差不多了，我们继续吧！！！</p>

<h4>ReactiveCocoa试图解决什么问题</h4>

<p>1.传统iOS开发过程中，状态以及状态之间依赖过多的问题<br>
2.传统MVC架构的问题：Controller比较复杂，可测试性差<br>
3.提供统一的消息传递机制</p>

<h4>ReactiveCocoa的使用</h4>

<p>RAC在应用中大量使用了block，由于Objective-C语言的内存管理是基于引用计数的，为了避免循环引用问题，在block中如果要引用self，需要使用@weakify(self)和@strongify(self)来避免强引用。另外，在使用时应该注意block的嵌套层数，不恰当的滥用多层嵌套block可能给程序的可维护性带来灾难。</p>

<p>当一个signal被一个subscriber subscribe后，这个subscriber何时会被移除？答案是当subscriber被sendComplete或sendError时，或者手动调用[disposable dispose]。</p>

<p>当subscriber被dispose后，所有该subscriber相关的工作都会被停止或取消，如http请求，资源也会被释放。</p>

<p>Signal events是线性的，不会出现并发的情况，除非显示地指定Scheduler。所以-subscribeNext:error:completed:里的block不需要锁定或者synchronized等操作，其他的events会依次排队，直到block处理完成。</p>

<p>Errors有优先权，如果有多个signals被同时监听，只要其中一个signal sendError，那么error就会立刻被传送给subscriber，并导致signals终止执行。相当于Exception。</p>

<h5>小结</h5>

<p>其实我对ReactiveCocoa了解还是在hello world阶段，很多东西都理解的很粗糙。ReactiveCocoa这个我觉得是可以作为一个系列来写，不过想了想我这种level，也写不出这么多东西来，暂时凑合着搞出一篇就好了^_^。
<br><br><br></p>

<hr />

<p>Deeply thanks all the people who make me grow up!</p>
]]></content>
  </entry>
  
</feed>
